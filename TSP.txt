function move(cost, visited, tour, count, col1, distance_matrix)
    mini = 999;
    n = 4;
    if (count == 3)
        visited(1) = 0
    end
    if (count >= n)
        disp(tour);
        disp(cost)
        return;
    end

    for i = col1
        for j = 1 : 4
            if (visited(j) ~= 1)
                if (distance_matrix(i, j) < mini)
                    mini = distance_matrix(i, j);
                    col = j;
                end
            end
        end
    end
    cost = cost + distance_matrix(col1, col)
    disp(cost)
    visited(1) = 1
    visited(col) = 1;
    count = count + 1;
    tour = [tour, col];
    
    move(cost, visited, tour, count, col, distance_matrix);
endfunction

distance_matrix = [999999 4 1 3; 4 999999 2 1; 1 2 999999 5; 3 1 5 999999];
tour = [];
count = 0;
col = 1;
cost = 0;
visited = zeros(1, 4);
move(cost, visited, tour, count, col, distance_matrix);


//another method


function tsp_nearest_neighbor(cities)
    n=size(cities,1)//no.of cities
    tour=zeros(1,n)//initialize the tour
    visited=zeros(1,n)//track visited cities
    
    //Start from the first city
    current_city=1
    tour(1)=current_city
    visited(1)=1
    
    for i=2:n
        min_distance=%inf
        for j=1:n
            if j~=current_city && visited(j)==0
                distance = norm(cities(current_city,:)-cities(j,:))
                if distance<min_distance
                    min_distance=distance
                    tour(i)=j
                end 
            end
    end
    visited(tour(i))=1
    current_city=tour(i)
end

//return to the starting city to complete the tpur
tour(n+1)=tour(1)

//calculate the total tour length
total_distance=0
for i=1:n
    total_distance=total_distance+norm(cities(tour(i),:)-cities(tour(i+1),:))
end

disp("Tour order:")
disp(tour)
disp(["Total tour length:",string(total_distance)])
end

cities=[0 10 1;
        0 15 2; 
        0 20 3; 
        1 35 2; 
        1 25 3;
        2 30 2]
tsp_nearest_neighbor(cities)
